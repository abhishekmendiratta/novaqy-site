var e=Object.defineProperty,r=Object.defineProperties,t=Object.getOwnPropertyDescriptors,n=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,o=(r,t,n)=>t in r?e(r,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):r[t]=n,i=(e,r)=>{for(var t in r||(r={}))s.call(r,t)&&o(e,t,r[t]);if(n)for(var t of n(r))a.call(r,t)&&o(e,t,r[t]);return e},c=(e,n)=>r(e,t(n)),u=(e,r,t)=>o(e,"symbol"!=typeof r?r+"":r,t),l=(e,r,t)=>new Promise((n,s)=>{var a=e=>{try{i(t.next(e))}catch(r){s(r)}},o=e=>{try{i(t.throw(e))}catch(r){s(r)}},i=e=>e.done?n(e.value):Promise.resolve(e.value).then(a,o);i((t=t.apply(e,r)).next())});import{c as d}from"./auth-vendor-CP-4ZW6D.js";const p=d("https://your-project.supabase.co","your-anon-key");class y{constructor(e=p){u(this,"supabase"),this.supabase=e}createSubscription(e){return l(this,null,function*(){try{const{data:r,error:t}=yield this.supabase.from("subscriptions").insert([e]).select().single();if(t)throw console.error("Error creating subscription:",t),t;return r}catch(r){return console.error("Subscription creation failed:",r),null}})}getUserSubscriptions(e){return l(this,null,function*(){try{const{data:r,error:t}=yield this.supabase.from("subscriptions").select("\n          *,\n          payments (\n            amount,\n            currency,\n            transaction_id\n          )\n        ").eq("user_id",e).order("created_at",{ascending:!1});return t?(console.error("Error fetching subscriptions:",t),[]):r||[]}catch(r){return console.error("Failed to fetch subscriptions:",r),[]}})}getActiveSubscription(e){return l(this,null,function*(){try{const{data:r,error:t}=yield this.supabase.from("subscriptions").select("*").eq("user_id",e).eq("status","active").order("created_at",{ascending:!1}).limit(1).single();return t?("PGRST116"===t.code||console.error("Error fetching active subscription:",t),null):r}catch(r){return console.error("Failed to fetch active subscription:",r),null}})}cancelSubscription(e,r){return l(this,null,function*(){try{const{error:t}=yield this.supabase.from("subscriptions").update({status:"cancelled",cancellation_date:(new Date).toISOString(),cancellation_reason:r,auto_renew:!1,updated_at:(new Date).toISOString()}).eq("id",e);return!t||(console.error("Error cancelling subscription:",t),!1)}catch(t){return console.error("Subscription cancellation failed:",t),!1}})}renewSubscription(e){return l(this,null,function*(){try{const{data:r,error:t}=yield this.supabase.from("subscriptions").select("*").eq("id",e).single();if(t||!r)return console.error("Error fetching subscription for renewal:",t),null;const n=new Date(r.end_date),s=new Date(n);s.setFullYear(s.getFullYear()+1);const{data:a,error:o}=yield this.supabase.from("subscriptions").update({end_date:s.toISOString(),renewal_count:r.renewal_count+1,last_renewal_date:(new Date).toISOString(),updated_at:(new Date).toISOString()}).eq("id",e).select().single();return o?(console.error("Error renewing subscription:",o),null):a}catch(r){return console.error("Subscription renewal failed:",r),null}})}checkAndUpdateExpiredSubscriptions(){return l(this,null,function*(){try{const e=(new Date).toISOString(),{data:r,error:t}=yield this.supabase.from("subscriptions").update({status:"expired"}).eq("status","active").lt("end_date",e).select("id");return t?(console.error("Error updating expired subscriptions:",t),0):(null==r?void 0:r.length)||0}catch(e){return console.error("Failed to check expired subscriptions:",e),0}})}getExpiringSubscriptions(e=30){return l(this,null,function*(){try{const r=new Date;r.setDate(r.getDate()+e);const t=r.toISOString(),{data:n,error:s}=yield this.supabase.from("subscriptions").select("*").eq("status","active").eq("auto_renew",!0).lte("end_date",t).order("end_date",{ascending:!0});return s?(console.error("Error fetching expiring subscriptions:",s),[]):n||[]}catch(r){return console.error("Failed to fetch expiring subscriptions:",r),[]}})}}class h{constructor(e=p){u(this,"supabase"),this.supabase=e}createPayment(e){return l(this,null,function*(){try{const{data:r,error:t}=yield this.supabase.from("payments").insert([e]).select().single();if(t)throw console.error("Error creating payment:",t),t;return r}catch(r){return console.error("Payment creation failed:",r),null}})}updatePaymentStatus(e,r,t){return l(this,null,function*(){try{const n={status:r,updated_at:(new Date).toISOString()};t&&(n.payu_response=t,n.gateway_transaction_id=t.bank_ref_num||t.bankcode||null);const{error:s}=yield this.supabase.from("payments").update(n).eq("transaction_id",e);return!s||(console.error("Error updating payment status:",s),!1)}catch(n){return console.error("Payment status update failed:",n),!1}})}getPaymentByTransactionId(e){return l(this,null,function*(){try{const{data:r,error:t}=yield this.supabase.from("payments").select("*").eq("transaction_id",e).single();return t?("PGRST116"===t.code||console.error("Error fetching payment:",t),null):r}catch(r){return console.error("Failed to fetch payment:",r),null}})}getUserPayments(e){return l(this,null,function*(){try{const{data:r,error:t}=yield this.supabase.from("payments").select("*").eq("user_id",e).order("created_at",{ascending:!1});return t?(console.error("Error fetching user payments:",t),[]):r||[]}catch(r){return console.error("Failed to fetch user payments:",r),[]}})}processRefund(e,r){return l(this,null,function*(){try{const t=yield this.getPaymentByTransactionId(e);if(!t)return console.error("Payment not found for refund"),!1;const n=r||t.amount,{error:s}=yield this.supabase.from("payments").update({status:"refunded",payu_response:c(i({},t.payu_response),{refund_amount:n,refund_date:(new Date).toISOString()}),updated_at:(new Date).toISOString()}).eq("transaction_id",e);return!s||(console.error("Error processing refund:",s),!1)}catch(t){return console.error("Refund processing failed:",t),!1}})}}const f=new h;class b{constructor(e=p){u(this,"supabase"),this.supabase=e}createOrUpdateUser(e){return l(this,null,function*(){try{const{data:r}=yield this.supabase.from("users").select("*").eq("email",e.email).single();if(r){const{data:t,error:n}=yield this.supabase.from("users").update(c(i({},e),{updated_at:(new Date).toISOString()})).eq("id",r.id).select().single();if(n)throw n;return t}{const{data:r,error:t}=yield this.supabase.from("users").insert([e]).select().single();if(t)throw t;return r}}catch(r){return console.error("User creation/update failed:",r),null}})}getUserByEmail(e){return l(this,null,function*(){try{const{data:r,error:t}=yield this.supabase.from("users").select("*").eq("email",e).single();if(t){if("PGRST116"===t.code)return null;throw t}return r}catch(r){return console.error("Failed to get user by email:",r),null}})}}const m=new class{constructor(e=p){u(this,"supabase"),this.supabase=e}processPaymentSuccess(e,r,t,n,s="personal"){return l(this,null,function*(){try{const a=new b(this.supabase),o=yield a.createOrUpdateUser(t);if(!o)throw new Error("Failed to create/update user");const i=new h(this.supabase),c=yield i.createPayment({user_id:o.id,transaction_id:e,amount:parseFloat(r.amount||"0"),currency:"USD",status:"completed",payment_method:"payu",plan_name:n,plan_type:s,payu_response:r,payment_gateway:"payu",gateway_transaction_id:r.bank_ref_num||r.bankcode||null});if(!c)throw new Error("Failed to create payment record");const u=new y(this.supabase),l=yield u.createSubscription({user_id:o.id,payment_id:c.id,plan_name:n,plan_type:s,status:"active",start_date:(new Date).toISOString(),end_date:new Date(Date.now()+31536e6).toISOString(),auto_renew:!0,renewal_count:0});if(!l)throw new Error("Failed to create subscription");const d=`Service Agreement for ${n} plan. Payment of $${c.amount} received on ${(new Date).toISOString()}.`,{error:p}=yield this.supabase.from("service_agreements").insert([{user_id:o.id,subscription_id:l.id,agreement_text:d,agreement_version:"1.0",signed_at:(new Date).toISOString(),ip_address:t.ip_address,user_agent:t.user_agent}]);return p&&console.error("Failed to create service agreement:",p),!0}catch(a){return console.error("Payment processing failed:",a),!1}})}};export{m as a,f as p};
