---
interface Props {
  name: string;
  class?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  interactive?: boolean;
}

const { name, class: className, size = 'md', interactive = false } = Astro.props;

let svgContent = '';
let viewBox = '0 0 24 24'; // Default viewBox for most icons

switch (name) {
  case 'phone':
    svgContent = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 0 1 2-2h2.2a1 1 0 0 1 1 .8l.5 3a1 1 0 0 1-.3.9L7 11a11 11 0 0 0 6 6l1.3-1.1a1 1 0 0 1 .9-.3l3 .5a1 1 0 0 1 .8 1V19a2 2 0 0 1-2 2H20" />`;
    break;
  case 'check':
    viewBox = '0 0 20 20';
    svgContent = `<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.707a1 1 0 00-1.414-1.414L9 10.172 7.707 8.879a1 1 0 10-1.414 1.414L9 13l4.707-4.707z" clip-rule="evenodd" />`;
    break;
  // Add more icons here as needed
  default:
    console.warn(`Icon "${name}" not found.`);
    break;
}

const iconClasses = {
  sm: 'icon-sm',
  md: 'icon-md',
  lg: 'icon-lg',
  xl: 'icon-xl',
};

const interactiveClass = interactive ? ' interactive' : '';
const defaultClasses = `inline-block align-middle flex-shrink-0 ${iconClasses[size]}${interactiveClass} ${className || ''}`;
---

<svg
  class={defaultClasses}
  aria-hidden="true"
  focusable="false"
  viewBox={viewBox}
  fill={name === 'check' ? 'currentColor' : 'none'}
  stroke={name === 'check' ? 'none' : 'currentColor'}
>
  {svgContent && <Fragment set:html={svgContent} />}
</svg>
